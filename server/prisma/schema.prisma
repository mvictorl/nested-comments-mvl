// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Models

// User model
model User {
  id             String        @id @default(uuid())
  email          String        @unique
  name           String        @unique
  password       String
  Tocken         Tocken?
  isActivated    Boolean       @default(false)
  activationLink String?
  roles          Role[]        @default([GUEST])
  posts          Post[]
  comments       Comment[]
  postLikes      PostLike[]
  commentLikes   CommentLike[]
  // roles        UserRole[]
}

// Tocken model
model Tocken {
  id            String @id @default(uuid())
  user          User   @relation(fields: [userId], references: [id])
  userId        String @unique
  refreshTocken String
}

// Post model
model Post {
  id        String     @id @default(uuid())
  title     String
  body      String
  author    User?      @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId    String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  comments  Comment[]
  likes     PostLike[]
}

// Comment model
model Comment {
  id        String        @id @default(uuid())
  message   String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  parent    Comment?      @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade)
  children  Comment[]     @relation("ParentChild")
  parentId  String?
  likes     CommentLike[]
}

// Comment Like model
model CommentLike {
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  userId    String
  commentId String

  @@id([userId, commentId])
}

// Post Like model
model PostLike {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId String
  postId String

  @@id([userId, postId])
}

// User Role by enum
enum Role {
  GUEST
  USER
  ADMIN
}

// // User Role model
// model UserRole {
//   id    String @id @default(uuid())
//   name  String @unique
//   users User[]
// }
